import spydrnet as sdn
from spydrnet.ir.innerpin import InnerPin
from spydrnet.util.selection import Selection

from spydrnet_tmr.transformation.util import add_suffix_to_name
from spydrnet_tmr.transformation.replication.nmr import NMR


def insert_organs(
    replicas,
    insertion_points,
    organ,
    name_suffix="ORGAN",
    replicate_organ=True,
    reuse_cables=False
):
    """
    Inserts organs (voters, detectors, etc.) at the specified insertion points.

    Accepted insertion_point types:
        * output pin - for simple insert at that pin and all of its replicated counterparts
        * input pin - for simple insert at that pin and all of its replicated counterparts
        * tuple (source pin, frozenset(sink pins)) - for complex insert. An organ will be placed between the source pin and the specified sink pins.

    :param replicas: the map from an original element to its replicas generated by :ref:`apply_nmr`
    :param insertion_points: list of outer pins of where organs should be inserted
    :param organ: type of organ to insert (e.g. XilinxDWCDetector)
    :param name_suffix: string to append to organ instance names (e.g. 'DETECTOR')
    :param replicate_organ: 
    :param reuse_cables: create multibit cables when possible instead of creating a unique cable for each voter.
    :return: a map from insertion point to all organs
    """
    insert_organs_agent = OrganInsertion.from_replicas_points_organ_and_name(
        replicas, insertion_points, organ, name_suffix, replicate_organ, reuse_cables
    )
    organs = insert_organs_agent.insert()
    return organs


class OrganInsertion:
    @staticmethod
    def from_replicas_points_organ_and_name(
        replicas, points, organ, name_suffix, replicate_organ=True, reuse_cables=False
    ):
        insert_organs_agent = OrganInsertion(
            replicas, points, organ, name_suffix, replicate_organ, reuse_cables
        )
        return insert_organs_agent

    def __init__(self, replicas, points, organ, name_suffix, replicate_organ, reuse_cables):
        self.replicas = replicas
        self.points = dict.fromkeys(self._filter_insertion_points(points))
        self.points = self.compress_insertion_points()
        self.organ = organ
        self.name_suffix = name_suffix
        self.replicate_organ = replicate_organ
        self.replica_suffix = self.find_replica_suffix()
        self.existing_organ = None
        self.reuse_cables = reuse_cables

        self._pinmap = None

        self.organs = None  # map from insertion point to all organs

        self._complex_port_replicas = dict()
        self._complex_cable_replicas = dict()

    @staticmethod
    def _filter_insertion_points(points):
        for point in points:
            # TODO: Lets refactor this so that an insertion point is a python object and has property is complex or is simple.
            if isinstance(point, sdn.Pin) or (
                isinstance(point, tuple)
                and len(point) == 2
                and isinstance(point[0], sdn.Pin)
            ):
                yield point

    def insert(self):
        self._insert_organs()

        return self.organs

    def _insert_organs(self):
        self._generate_pinmap()
        self.organs = dict()
        for point in self.points:
            if isinstance(point, tuple):
                self._complex_insert(point)
            else:
                self._simple_insert(point)

    def _generate_pinmap(self):
        self._pinmap = dict()
        for original, replicas in self.replicas.items():
            if isinstance(original, sdn.Port):
                other_pins = list(x.pins for x in replicas)
                for pins in zip(original.pins, *other_pins):
                    self._pinmap[pins[0]] = list(pins[1:])
            elif isinstance(original, sdn.Instance):
                reference = original.reference
                for port in reference.ports:
                    for pin in port.pins:
                        self._pinmap[original.pins[pin]] = list(
                            x.pins[pin] for x in replicas
                        )

    def _complex_insert(self, complex_insertion_point):
        """
        Inserts organs only between the specified source and sinks.
        """
        driver_pin = complex_insertion_point[0]
        sink_pins = complex_insertion_point[1]

        associated_netlist = next(driver_pin.get_netlists())

        self.organ.ensure_definition_in_netlist(associated_netlist)
        if self._organ_has_no_primary_output():
            self._simple_insert(driver_pin)

        elif all(pin in driver_pin.wire.pins for pin in sink_pins):
            # all the pins on the same wire, so
            # normal reduction voter insert
            new_wire_to_be_driven_by_voter = None
            if self.replica_suffix in driver_pin.wire.cable.name:
                new_wire_to_be_driven_by_voter =self._create_a_wire_from_pin(driver_pin)
            else: 
                # the current wire is the non replicated original and thus should be output from the voter
                new_wire_to_be_driven_by_voter = driver_pin.wire
                if self.name_suffix not in new_wire_to_be_driven_by_voter.cable.name:
                    new_wire_to_be_driven_by_voter.cable.name = new_wire_to_be_driven_by_voter.cable.name + "_" + self.name_suffix
                driver_pin.wire.disconnect_pin(driver_pin)
                new_wire = self._create_a_wire_from_pin(driver_pin)
                new_wire.connect_pin(driver_pin)
            self._complex_voter_add(driver_pin, new_wire_to_be_driven_by_voter)
            for pin in sink_pins:
                if pin.wire:
                    pin.wire.disconnect_pin(pin)
                new_wire_to_be_driven_by_voter.connect_pin(pin)
        else:
            # complex insert with replicated ports and wires
            # when we connect a wire we only want to hook it up to the new ports and pins that we have replicated including
            # the pins that we have replicated
            additional_wires_to_replicate = (
                NMR.identify_additional_wires_to_replicate(
                    {driver_pin}, sink_pins
                )
            )
            additional_ports_to_replicate = (
                NMR.identify_additional_ports_to_replicate(
                    additional_wires_to_replicate
                )
            )
            complex_portmap = self._complex_replicate_ports(
                additional_ports_to_replicate
            )
            complex_wiremap = self._complex_replicate_wires(
                additional_wires_to_replicate
            )
            self._complex_connect(
                complex_wiremap, complex_portmap, sink_pins
            )
            # new_wire_to_be_driven_by_voter = None
            # if self.replica_suffix not in driver_pin.wire.cable.name:
            #     new_wire_to_be_driven_by_voter = driver_pin.wire
            #     new_wire_to_be_driven_by_voter.cable.name = new_wire_to_be_driven_by_voter.cable.name + "_" + self.name_suffix
            #     driver_pin.wire.disconnect_pin(driver_pin)
            #     new_wire = self._create_a_wire_from_pin(driver_pin)
            #     new_wire.connect_pin(driver_pin)
            # else:
            new_wire_to_be_driven_by_voter = complex_wiremap[
                driver_pin.wire
            ]
            self._complex_voter_add(
                driver_pin, new_wire_to_be_driven_by_voter
            )

    def _complex_replicate_ports(self, additional_ports_to_replicate):
        complex_portmap = dict()
        for port in additional_ports_to_replicate:
            if port in self._complex_port_replicas:
                complex_portmap[port] = self._complex_port_replicas[port]
            else:
                port_clone = port.clone()
                add_suffix_to_name(port_clone, "_COMPLEX")
                port.definition.add_port(port_clone)
                complex_portmap[port] = port_clone
                self._complex_port_replicas[port] = port_clone
        return complex_portmap

    def _complex_replicate_wires(self, additional_wires_to_replicate):
        complex_wiremap = dict()

        for wire in additional_wires_to_replicate:
            cable = wire.cable
            if cable in self._complex_cable_replicas:
                cable_clone = self._complex_cable_replicas[cable]
            else:
                cable_clone = cable.clone()
                add_suffix_to_name(cable_clone, "_COMPLEX")
                cable.definition.add_cable(cable_clone)
                self._complex_cable_replicas[cable] = cable_clone

            for wire_index, cable_wire in enumerate(cable.wires):
                if cable_wire in additional_wires_to_replicate:
                    complex_wiremap[cable_wire] = cable_clone.wires[wire_index]

        return complex_wiremap

    def _complex_connect(self, complex_wiremap, complex_portmap, sink_pins):
        items_to_insert = []
        for original_wire, clone_wire in complex_wiremap.items():
            items_to_insert.append((clone_wire, original_wire))
            pins_to_swap = set()
            for pin in original_wire.pins:
                if isinstance(pin, sdn.InnerPin):
                    port = pin.port
                    if port in complex_portmap:
                        pin_index = port.pins.index(pin)
                        clone_port = complex_portmap[port]
                        clone_pin = clone_port.pins[pin_index]
                        clone_wire.connect_pin(clone_pin)
                elif isinstance(pin, sdn.OuterPin):
                    if pin in sink_pins:
                        pins_to_swap.add(pin)
                    else:
                        inner_pin = pin.inner_pin
                        port = inner_pin.port
                        if port in complex_portmap:
                            pin_index = port.pins.index(inner_pin)
                            clone_port = complex_portmap[port]
                            clone_pin = clone_port.pins[pin_index]
                            instance = pin.instance
                            outer_clone_pin = instance.pins[clone_pin]
                            clone_wire.connect_pin(outer_clone_pin)

            for pin in pins_to_swap:
                connected_wire = pin.wire
                connected_wire.disconnect_pin(pin)
                clone_wire = complex_wiremap[connected_wire]
                clone_wire.connect_pin(pin)
        for item in items_to_insert:
            complex_wiremap[item[0]] = item[1]

    def _complex_voter_add(self, driver_pin, new_wire_to_be_driven_by_voter):
        # create a voter based on new_wire_to_be_driven_name
        # print(new_wire_to_be_driven_by_voter.cable.name + " is the new voter output wire")
        primary_organ = self._create_a_new_organ_from_wire(
            new_wire_to_be_driven_by_voter
        )
        # if self.name_suffix not in primary_organ.name:
        #     primary_organ.name = primary_organ.name + "_" + self.name_suffix
        self.organs[driver_pin] = list()
        self.organs[driver_pin].append(primary_organ)

        primary_output_outer_pin = primary_organ.pins[
            self.organ.get_primary_output_pin()
        ]
        new_wire_to_be_driven_by_voter.connect_pin(primary_output_outer_pin)

        original_wire = driver_pin.wire
        original_wire.connect_pin(
            primary_organ.pins[self.organ.get_primary_input_pin()]
        )

        for other_pin, other_input_pin in zip(
            self._pinmap[driver_pin], self.organ.get_other_input_pins()
        ):
            other_wire = other_pin.wire
            if not other_wire:
                other_wire = self._create_a_wire_from_pin(other_pin)
                other_wire.connect_pin(other_pin)
            other_wire.connect_pin(primary_organ.pins[other_input_pin])

    def _simple_insert(self, primary):

        associated_netlist = next(primary.get_netlists())
        self.organ.ensure_definition_in_netlist(associated_netlist)

        if self._organ_has_no_primary_output():
            self.simple_insert_no_primary_output(primary)
        else:
            if primary.inner_pin.port.direction is sdn.OUT:
                self._simple_insert_output_pin(primary)
            else:
                self._simple_insert_input_pin(primary)

    def simple_insert_no_primary_output(self, primary):
        """
        For inserting detectors
        """
        if self._organ_has_no_primary_output():
            # create new organ
            additional_wire = self._create_a_wire_from_pin(primary)
            primary_organ = self._create_a_new_organ_from_wire(additional_wire)
            self.organs[primary] = list()
            self.organs[primary].append(primary_organ)
            additional_wire.cable.definition.remove_cable(
                additional_wire.cable
            )

            # original wire to original wire
            original_wire = primary.wire
            original_wire.connect_pin(
                primary_organ.pins[self.organ.get_primary_input_pin()]
            )

            other_wires = list()
            other_organs = list()
            for other_pin, other_input_pin in zip(
                self._pinmap[primary], self.organ.get_other_input_pins()
            ):
                # Create a new wire
                additional_wire = self._create_a_wire_from_pin(other_pin)

                # Create new organ if needed
                if self.replicate_organ:
                    other_organ = self._create_a_new_organ_from_wire(
                        additional_wire
                    )
                    other_organs.append(other_organ)

                other_wire = other_pin.wire
                if not other_wire:
                    other_wire = additional_wire
                    other_wire.connect_pin(other_pin)
                else:
                    additional_wire.cable.definition.remove_cable(
                        additional_wire.cable
                    )

                other_wire.connect_pin(primary_organ.pins[other_input_pin])
                other_wires.append(other_wire)

            for other_organ in other_organs:
                original_wire.connect_pin(
                    other_organ.pins[self.organ.get_primary_input_pin()]
                )
                for other_wire, other_input_pin in zip(
                    other_wires, self.organ.get_other_input_pins()
                ):
                    other_wire.connect_pin(other_organ.pins[other_input_pin])
                self.organs[primary].append(other_organ)

    def _simple_insert_output_pin(self, primary):
        """
        Performs a simple insert of an organ at the output pin point.
        """
        # create other wires
        additional_wire = self._create_a_wire_from_pin(primary)
        other_wires = list(
            self._create_a_wire_from_pin(other_pin)
            for other_pin in self._pinmap[primary]
        )

        # detach original wire
        original_wire = primary.wire
        original_wire.disconnect_pin(primary)

        # attach additional wire to src
        additional_wire.connect_pin(primary)

        # create new organ
        primary_organ = self._create_a_new_organ_from_wire(additional_wire)
        self.organs[primary] = list()
        self.organs[primary].append(primary_organ)

        # attach additional wire to primary input on organ
        primary_input_outer_pin = primary_organ.pins[
            self.organ.get_primary_input_pin()
        ]
        additional_wire.connect_pin(primary_input_outer_pin)

        # attached original wire to primary output of organ
        primary_output_outer_pin = primary_organ.pins[
            self.organ.get_primary_output_pin()
        ]
        original_wire.connect_pin(primary_output_outer_pin)

        # attach other wires to primary organ
        for other_wire, other_input_pin in zip(
            other_wires, self.organ.get_other_input_pins()
        ):
            other_input_outer_pin = primary_organ.pins[other_input_pin]
            other_wire.connect_pin(other_input_outer_pin)

        if self._is_reduction(primary) is False:
            # detach other original wires
            other_original_wires = list()
            for other_pin in self._pinmap[primary]:
                other_original_wire = other_pin.wire
                other_original_wire.disconnect_pin(other_pin)
                other_original_wires.append(other_original_wire)

            for other_wire, other_original_wire in zip(
                other_wires, other_original_wires
            ):
                other_organ = self._create_a_new_organ_from_wire(other_wire)
                self.organs[primary].append(other_organ)

                # attach additional wire to primary input on other organ
                other_organ_primary_input_outer_pin = other_organ.pins[
                    self.organ.get_primary_input_pin()
                ]
                additional_wire.connect_pin(
                    other_organ_primary_input_outer_pin
                )

                # attach other wires to primary organ
                for other_other_wire, other_input_pin in zip(
                    other_wires, self.organ.get_other_input_pins()
                ):
                    other_input_outer_pin = other_organ.pins[other_input_pin]
                    other_other_wire.connect_pin(other_input_outer_pin)

                # attach other original wire to the primary output on the other organ
                other_organ_primary_output_outer_pin = other_organ.pins[
                    self.organ.get_primary_output_pin()
                ]
                other_original_wire.connect_pin(
                    other_organ_primary_output_outer_pin
                )

        # attach other instances to primary organ
        for other_wire, other_pin in zip(other_wires, self._pinmap[primary]):
            other_wire.connect_pin(other_pin)

    def _simple_insert_input_pin(self, primary):
        """
        Performs a simple insert of an organ at the input pin point.
        """
        # first, check if that particular wire already has a voter on it, if so, reuse it.
        if self.organ_on_wire_already(primary):
            print("reusing an organ")
            organ = self.existing_organ
            self.organs[primary] = list()
            self.organs[primary].append(organ)
            primary_organ_output_outer_pin = organ.pins[
                self.organ.get_primary_output_pin()
            ]
            primary.wire.disconnect_pin(primary)
            primary_organ_output_outer_pin.wire.connect_pin(primary)

            if self._is_reduction(primary) is False:
                for other_pin in self._pinmap[primary]:
                    if self.organ_on_wire_already(other_pin):
                        print("reusing an organ")
                        organ = self.existing_organ
                        self.organs[primary] = list()
                        self.organs[primary].append(organ)
                        organ_output_outer_pin = organ.pins[
                            self.organ.get_primary_output_pin()
                        ]
                        other_pin.wire.disconnect_pin(other_pin)
                        organ_output_outer_pin.wire.connect_pin(other_pin)
                    else:
                        all_wires = []
                        all_wires.append(primary.wire)
                        for pin in self._pinmap[primary]:
                            all_wires.append(pin.wire)
                        for other_pin in self._pinmap[primary]:
                            other_wire = self._create_a_wire_from_pin(
                                other_pin
                            )
                            other_organ = self._create_a_new_organ_from_wire(
                                other_wire
                            )
                            self.organs[primary].append(other_organ)

                            other_organ_output_outer_pin = other_organ.pins[
                                self.organ.get_primary_output_pin()
                            ]
                            other_wire.connect_pin(
                                other_organ_output_outer_pin
                            )

                            other_pin.wire.disconnect_pin(other_pin)
                            other_wire.connect_pin(other_pin)

                            primary_input_outer_pin = other_organ.pins[
                                self.organ.get_primary_input_pin()
                            ]
                            all_wires[0].connect_pin(primary_input_outer_pin)

                            other_organ_input_outer_pins = list(
                                other_organ.pins[x]
                                for x in self.organ.get_other_input_pins()
                            )
                            for i in range(len(other_organ_input_outer_pins)):
                                all_wires[i + 1].connect_pin(
                                    other_organ_input_outer_pins[i]
                                )

        else:
            # create new wire for organ output, the organ, and add it to the list
            primary_wire = self._create_a_wire_from_pin(primary)
            primary_organ = self._create_a_new_organ_from_wire(primary_wire)
            self.organs[primary] = list()
            self.organs[primary].append(primary_organ)

            # get a list of all the specified pin location's wires
            all_wires = []
            all_wires.append(primary.wire)
            for pin in self._pinmap[primary]:
                all_wires.append(pin.wire)

            # disconnect the primary pin and connect it the the organ's output wire
            primary_organ_output_outer_pin = primary_organ.pins[
                self.organ.get_primary_output_pin()
            ]
            primary_wire.connect_pin(primary_organ_output_outer_pin)
            primary.wire.disconnect_pin(primary)
            primary_wire.connect_pin(primary)

            # attach the original wire to primary input on organ
            primary_input_outer_pin = primary_organ.pins[
                self.organ.get_primary_input_pin()
            ]
            all_wires[0].connect_pin(primary_input_outer_pin)

            # attach other wires to other inputs on organ
            other_organ_input_outer_pins = list(
                primary_organ.pins[x]
                for x in self.organ.get_other_input_pins()
            )
            for i in range(len(other_organ_input_outer_pins)):
                all_wires[i + 1].connect_pin(other_organ_input_outer_pins[i])

            if self._is_reduction(primary) is False:
                # repeat but for the other pins
                for other_pin in self._pinmap[primary]:
                    other_wire = self._create_a_wire_from_pin(other_pin)
                    other_organ = self._create_a_new_organ_from_wire(
                        other_wire
                    )
                    self.organs[primary].append(other_organ)

                    other_organ_output_outer_pin = other_organ.pins[
                        self.organ.get_primary_output_pin()
                    ]
                    other_wire.connect_pin(other_organ_output_outer_pin)

                    other_pin.wire.disconnect_pin(other_pin)
                    other_wire.connect_pin(other_pin)

                    primary_input_outer_pin = other_organ.pins[
                        self.organ.get_primary_input_pin()
                    ]
                    all_wires[0].connect_pin(primary_input_outer_pin)

                    other_organ_input_outer_pins = list(
                        other_organ.pins[x]
                        for x in self.organ.get_other_input_pins()
                    )
                    for i in range(len(other_organ_input_outer_pins)):
                        all_wires[i + 1].connect_pin(
                            other_organ_input_outer_pins[i]
                        )

    def _create_a_new_organ_from_wire(self, additional_wire):
        primary_organ = self.organ.create_instance()
        primary_organ.name = additional_wire.cable.name
        if len(additional_wire.cable.wires) > 1:
            primary_organ.name += "_" + str(
                additional_wire.cable.wires.index(additional_wire)
            )

        self.set_identifier(primary_organ, self.get_identifier(additional_wire.cable))
        additional_wire.cable.definition.add_child(primary_organ)
        return primary_organ

    def _organ_has_no_primary_output(self):
        return self.organ.get_primary_output_pin() is None

    def _is_reduction(self, pin):
        return any(other_pin.wire is None for other_pin in self._pinmap[pin])

    def _create_a_wire_from_pin(self, primary):
        if self.reuse_cables:
            return self._create_a_wire_from_pin_reuse(primary)
        else:
            return self._create_a_wire_from_pin_1(primary) 

    def _create_a_wire_from_pin_1(self, primary):
        if isinstance(primary, sdn.InnerPin):
            # wire name = <port_name><type_suffix>[pin_index if array]
            port = primary.port
            port_name = port.name
            port_identifier = self.get_identifier(port)
            if not port_identifier:
                port_identifier = port_name
            if port.is_array:
                pin_index = port.pins.index(primary)
                cable_name = (
                    port_name
                    + "_"
                    + self.name_suffix
                    + "["
                    + str(pin_index)
                    + "]"
                )
                cable_identifier = (
                    port_identifier
                    + "_"
                    + self.name_suffix
                    + "_"
                    + str(pin_index)
                    # + "_"
                )
            else:
                cable_name = port_name + "_" + self.name_suffix
                cable_identifier = (
                    port_identifier + "_" + self.name_suffix
                )
            parent = port.definition
        else:
            instance = primary.instance
            instance_name = instance.name
            instance_identifier = self.get_identifier(instance)
            if not instance_identifier:
                instance_identifier = instance_name
            inner_pin = primary.inner_pin
            port = inner_pin.port
            port_name = port.name
            port_identifier = self.get_identifier(port)
            if not port_identifier:
                port_identifier = port_name
            if port.is_array:
                pin_index = port.pins.index(inner_pin)
                cable_name = (
                    instance_name
                    + "_"
                    + port_name
                    + "_"
                    + self.name_suffix
                    + "["
                    + str(pin_index)
                    + "]"
                )
                cable_identifier = (
                    instance_identifier
                    + "_"
                    + port_identifier
                    + "_"
                    + self.name_suffix
                    + "_"
                    + str(pin_index)
                    # + "_"
                )
            else:
                cable_name = (
                    instance_name + "_" + port_name + "_" + self.name_suffix
                )
                cable_identifier = (
                    instance_identifier
                    + "_"
                    + port_identifier
                    + "_"
                    + self.name_suffix
                )
            parent = instance.parent
        new_cable = parent.create_cable()
        new_cable.name = cable_name
        self.set_identifier(new_cable, cable_identifier)
        new_wire = new_cable.create_wire()
        return new_wire
    
    def _create_a_wire_from_pin_reuse(self, primary):
        pin_index = None
        if isinstance(primary, sdn.InnerPin):
            # wire name = <port_name><type_suffix>[pin_index if array]
            port = primary.port
            port_name = port.name
            port_identifier = self.get_identifier(port)
            if not port_identifier:
                port_identifier = port_name
            if port.is_array:
                pin_index = port.pins.index(primary)
                cable_name = (
                    port_name
                    + "_"
                    + self.name_suffix
                    # + "["
                    # + str(pin_index)
                    # + "]"
                )
                cable_identifier = (
                    port_identifier
                    + "_"
                    + self.name_suffix
                    # + "_"
                    # + str(pin_index)
                    # + "_"
                )
            else:
                cable_name = port_name + "_" + self.name_suffix
                cable_identifier = (
                    port_identifier + "_" + self.name_suffix
                )
            parent = port.definition
        else:
            instance = primary.instance
            instance_name = instance.name
            instance_identifier = self.get_identifier(instance)
            if not instance_identifier:
                instance_identifier = instance_name
            inner_pin = primary.inner_pin
            port = inner_pin.port
            port_name = port.name
            port_identifier = self.get_identifier(port)
            if not port_identifier:
                port_identifier = port_name
            if port.is_array:
                pin_index = port.pins.index(inner_pin)
                cable_name = (
                    instance_name
                    + "_"
                    + port_name
                    + "_"
                    + self.name_suffix
                    # + "["
                    # + str(pin_index)
                    # + "]"
                )
                cable_identifier = (
                    instance_identifier
                    + "_"
                    + port_identifier
                    + "_"
                    + self.name_suffix
                    # + "_"
                    # + str(pin_index)
                    # + "_"
                )
            else:
                cable_name = (
                    instance_name + "_" + port_name + "_" + self.name_suffix
                )
                cable_identifier = (
                    instance_identifier
                    + "_"
                    + port_identifier
                    + "_"
                    + self.name_suffix
                )
            parent = instance.parent
        new_cable = next(parent.get_cables(cable_name), None)
        if not new_cable:
            new_cable = parent.create_cable()
            new_cable.name = cable_name
            self.set_identifier(new_cable, cable_identifier)
        new_wire = sdn.ir.Wire()
        new_cable.add_wire(new_wire, pin_index)
        new_wire = new_cable.create_wire()
        return new_wire

    def organ_on_wire_already(self, pin):
        """
        Checks to see if the current wire already has an organ on it
        """
        key = self.find_key(pin.instance)
        wire = pin.wire
        has_organ_already = False
        if wire:
            for pin2 in wire.get_pins(selection=Selection.OUTSIDE):
                if self.name_suffix in pin2.instance.name:
                    has_organ_already = True
                    self.existing_organ = pin2.instance
                    if key in pin2.instance.name:
                        break
        return has_organ_already

    def find_replica_suffix(self):
        """
        Finds the suffix appended to the replicas (e.g. 'TMR')
        """
        all_replicas = []
        for key in self.replicas.keys():
            all_replicas += list(
                replica.name for replica in self.replicas[key]
            )
        for substring in all_replicas[0].split("_"):
            if all(substring in replica for replica in all_replicas):
                # print(substring)
                return substring
        return ""

    def find_key(self, instance):
        start_index = instance.name.find(self.replica_suffix)
        stop_index = start_index + len(self.replica_suffix) + 2
        if start_index == -1:
            key = ""
        else:
            key = instance.name[start_index:stop_index]
        return key

    def compress_insertion_points(self):
        # first, compress reduction voters
        reduction_dict = dict()
        other_points = []
        for point in self.points:
            if isinstance(point, tuple):
                if point[1].__class__ is frozenset:
                    # other_points.append(point)
                    if point[0] in reduction_dict.keys():
                        reduction_dict[point[0]] += list(x for x in point[1])
                    else:
                        reduction_dict[point[0]] = list(x for x in point[1])
                else:
                    if point[0] in reduction_dict.keys():
                        reduction_dict[point[0]].append(point[1])
                    else:
                        reduction_dict[point[0]] = [point[1]]
            else:
                other_points.append(point)

        # next, see if any output pins will cover reduction points. If so, remove the redundancy
        # also see if any input pins are in the reduction points. If so, remove the redundancy
        to_remove = []
        for point in other_points:
            if isinstance(point, sdn.Pin):
                if point in reduction_dict.keys():
                    reduction_dict.pop(point)
                else:
                    for key in reduction_dict.keys():
                        if point in reduction_dict[key]:
                            to_remove.append(point)
                            # reduction_dict[key].remove(point)

        reduction_point_list = []
        for key in reduction_dict.keys():
            reduction_point_list.append((key, frozenset(reduction_dict[key])))

        all_points = reduction_point_list + list(
            x for x in other_points if x not in to_remove
        )
        return all_points

    def get_identifier(self,object):
        if "EDIF.identifier" in object.data:
            return object["EDIF.identifier"]
        return None

    def set_identifier(self,object,name):
        if name:
            object["EDIF.identifier"] = name
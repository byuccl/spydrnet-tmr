import os
from spydrnet_tmr.symbiflow.fix_unconn_nets import connect_unconn_to_dummy
from spydrnet_tmr.symbiflow.update_constraints import fix_and_update_constraints

def run_netlist_fixes(netlist, replicas, new_constraints_file=None, suffix="TMR"):
    '''
    Single function call that will do necessary things to get netlist ready for symbiflow.
    Calls :ref:`connect_unconn_to_dummy` and :ref:`update_constraints`. More functions may be added later as necessary.

    :param netlist: the current netlist
    :param replicas: the replica dictionary generated by apply_nmr()
    :param new_constraints_file: file that contains port:pin pairs
    :param suffix: replication suffix. e.g "TMR"
    '''
    fixer = Netlist_Fixer(netlist, replicas, new_constraints_file, suffix)
    fixer.run()

class Netlist_Fixer():
    def __init__(self, netlist, replicas, new_constraints_file, suffix):
        self.netlist = netlist
        self.replicas = replicas
        self.new_constraints_file = new_constraints_file
        self.suffix = suffix

    def run(self):
        connect_unconn_to_dummy(self.netlist)
        if os.isfile(self.new_constraints_file):
            fix_and_update_constraints(self.netlist, self.replicas, self.new_constraints_file, self.suffix)